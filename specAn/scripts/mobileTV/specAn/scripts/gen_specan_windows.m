% Generate window functions for spectrum analyser core

% Standardise on a length of 4096 samples for the stored window to optimise
% storage space and code loading time.  If the FFT size is less than this
% then the data will be sub-sampled, and if the FFT size is greater then
% the window data will be linearly interpolated.
% Only half of the window is stored, since it is symmetrical.

windowLen = 4096;   % Must match (STORED_WINDOW_SIZE * 2) in C code
numWindows = 2;

for i=1:numWindows
    switch i
        case 1
            winName = 'HanningWindow';
            w = hann(windowLen);
        case 2
            winName = 'HammingWindow';
            w = hamming(windowLen);
        otherwise
            error('Unsupported window index');
    end
    
    % The window values are 12-bit signed values packed into 24-bit words
    % such that they can be directly multiplied by complex quantities in
    % the MCP code.  The values are fully fractional i.e. Q0.11.
    % We place them in the right-aligned GRAM view because if this array
    % were to be placed in ext.RAM then there are potential hardware issues
    % transferring from 32-bit memory into the complex GRAM view.
    fid = fopen(['SPECAN_' winName '.c'], 'wt');
    
    if (fid == -1)
        error('Failed to open file');
    end
    
    fprintf(fid, '/* Window function auto-generated by gen_specan_windows.m, DO NOT EDIT */\n\n');   
    fprintf(fid, '#ifdef __META_FAMILY__\n');
    fprintf(fid, '#include <metag/machine.inc>\n');
    fprintf(fid, '#include <metag/metagtbi.h>\n');
    fprintf(fid, '#endif\n');
    fprintf(fid, '#include "SPECAN_private.h"\n');
    fprintf(fid, 'const unsigned %s[STORED_WINDOW_SIZE] = {\n', winName);
    
    for n=1:(windowLen/2)
        % Convert to Q0.11 and limit to the largest representable +ve value
        val_fxp = round(w(n) * 2^11);
        val_fxp = min(val_fxp, 2^11 - 1);
        % Place the fixed point window sample twice onto a 32-bit word, to
        % align with the real and complex parts when using the right-aligned
        % GRAM view.  NOTE: we assume here that window values are always
        % positive, so don't need to deal with sign-extension.
        val = val_fxp + (val_fxp * 2^12);
        fprintf(fid, '%d', val);
        if (n == windowLen)
            fprintf(fid, '\n');
        else
            fprintf(fid, ',\n');
        end
    end
    
    fprintf(fid, '};\n');
    
    fclose(fid);
    
end

